// use context7
@page "/map"
@using Microsoft.JSInterop
@using MudBlazor
@using Microsoft.AspNetCore.Components
@using AutoTracking.Services
@inject IJSRuntime JS
@inject TrackingService Tracking

<PageTitle>AutoTracking - Kaart</PageTitle>

<MudPaper Class="pa-4" Style="height: 80vh;">
    <div id="map" style="height:100%; width:100%; min-height:400px;"></div>
    <MudStack Direction="Row" Spacing="2" Class="mt-4">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ToggleTracking">@StartButtonText</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="EndRoute">Einde route</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Info" OnClick="ExportRoutes">Export</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="GoToSettings">Settings</MudButton>
    </MudStack>
</MudPaper>

@code {
    private System.Threading.Timer? _timer;
    private int intervalSeconds = 5; // default, kan uit settings komen
    private string StartButtonText => Tracking.IsTracking ? "Actief" : "Gepauseerd";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initMap");
            Tracking.OnTrackingChanged += StateHasChanged;
        }
    }

    private async void ToggleTracking()
    {
        if (!Tracking.IsTracking)
        {
            await Tracking.StartTrackingAsync();
            _timer = new System.Threading.Timer(async _ => await AddCurrentPositionAsync(), null, 0, intervalSeconds * 1000);
        }
        else
        {
            Tracking.PauseTracking();
            _timer?.Dispose();
        }
        StateHasChanged();
    }

    private async Task AddCurrentPositionAsync()
    {
        var pos = await JS.InvokeAsync<GeolocationResult>("getCurrentPosition");
        if (pos != null)
        {
            var point = new TrackingPoint
            {
                RouteNumber = Tracking.CurrentRouteNumber,
                Latitude = pos.Latitude,
                Longitude = pos.Longitude,
                Timestamp = DateTime.Now,
                // Street/City kan via reverse geocoding API
            };
            Tracking.AddPoint(point);
            await JS.InvokeVoidAsync("addRoutePoint", pos.Latitude, pos.Longitude);
        }
    }

    private async void EndRoute()
    {
        _timer?.Dispose();
        await Tracking.EndRouteAsync();
        await JS.InvokeVoidAsync("clearRoute");
        StateHasChanged();
    }

    private void ExportRoutes()
    {
        // Export logic volgt
    }

    private void GoToSettings()
    {
        // Navigatie naar settings pagina
    }

    public class GeolocationResult
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }
}
